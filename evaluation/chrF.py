import statistics

# this file evaluates the tweets generated by the LSTM and GPT-2 models using the chrF (character n-gram F-score) algorithm

def chrF(real_text, generated_text):
    generated_text_chars = set(generated_text)
    real_text_chars = set(real_text)
    precision = len([0 for c in generated_text if c in real_text_chars])    # fraction of n-grams present in the generated text that are also in the real text
    recall = len([0 for c in real_text if c in generated_text_chars])       # fraction of n-grams present in the real text that are also in the generated text
    return 2*(precision * recall) / (precision + recall)

ACTUAL_TRUMP_TWEETS_FILE_NAME = '../data/preprocessed_trump_test_data_filtered_for_LSTM'
ACTUAL_NEWS_TWEETS_FILE_NAME = '../data/test_news_data_filtered_for_LSTM'

GPT2_TRUMP_OUTPUT_FILE_NAME = '../GPT-2/trump_output'
GPT2_NEWS_OUTPUT_FILE_NAME = '../GPT-2/news_output'

LSTM_TRUMP_OUTPUT_FILE_NAME = '../LSTM/test-outputs/LSTM_trump_test_output'
LSTM_NEWS_OUTPUT_FILE_NAME = '../LSTM/test-outputs/LSTM_news_test_output'

with open(ACTUAL_TRUMP_TWEETS_FILE_NAME) as real_file:
    # real_lines = [l[:-1] for l in real_file.read().split('\n') if not l.isspace()]
    real_lines = [l[:-1].lower() for l in real_file.read().split('\n') if l.strip() != '']

    for file_name, model_type in ((GPT2_TRUMP_OUTPUT_FILE_NAME, 'GPT-2'), (LSTM_TRUMP_OUTPUT_FILE_NAME, 'LSTM')):
        with open(file_name) as gen_file:
            gen_lines = [l[:-1].lower() for l in gen_file.read().split('\n') if l.strip() != '']
            # chrF_scores = []
            # for i in range(len(real_lines)):
            #     min_len = min(len(real_lines[i]), len(gen_lines[i]))
            #     chrF_scores.append(chrF(real_lines[i][:min_len], gen_lines[i][:min_len]))
            chrF_scores = [chrF(real_lines[i], gen_lines[i]) for i in range(len(real_lines))]
            avg_chrF = sum(chrF_scores)/len(chrF_scores)
            print(model_type, 'Trump chrF score:\t', avg_chrF, '\tstddev:', statistics.stdev(chrF_scores))

with open(ACTUAL_NEWS_TWEETS_FILE_NAME) as real_file:
    # real_lines = [l[:-1] for l in real_file.read().split('\n') if not l.isspace()]
    real_lines = [l[:-1].lower() for l in real_file.read().split('\n') if l.strip() != '']

    for file_name, model_type in ((GPT2_NEWS_OUTPUT_FILE_NAME, 'GPT-2'), (LSTM_NEWS_OUTPUT_FILE_NAME, 'LSTM')):
        with open(file_name) as gen_file:
            gen_lines = [l[:-1].lower() for l in gen_file.read().split('\n') if l.strip() != '']
            # chrF_scores = []
            # for i in range(len(real_lines)):
            #     min_len = min(len(real_lines[i]), len(gen_lines[i]))
            #     chrF_scores.append(chrF(real_lines[i][:min_len], gen_lines[i][:min_len]))
            chrF_scores = [chrF(real_lines[i], gen_lines[i]) for i in range(len(real_lines))]
            avg_chrF = sum(chrF_scores)/len(chrF_scores)
            print(model_type, 'News chrF score:\t', avg_chrF, '\tstddev:', statistics.stdev(chrF_scores))
